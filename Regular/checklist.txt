// Завбъдеще ще е добре да напиша моментите за тестване на приложението
[x] Зачиствам ItemsDB, за да почна наново: cmd.exe -> Run as admin -> mongo -> use ItemsDB -> db.dropDatabase()
[x] npm init -y, npm i, npx nodemon start
[[]] Последователност: view & model -> controller -> router -> routes
[x] Настройваме пропъртитата на моделите според задачата и преименуваме, където е нужно
[] Правим всички страници достъпни за разглеждане (т.е. статични)
- [x] Разпределяме html-ите на шаблони и паршъли и изтриваме ненужните части.
// home.hbs=guestHomePage, items.hbs=loggedInHomePage
// Завбъдеще ще е добре да ги преименувам и да преместя get.all от shoeController в homeController.js и от там в homeRouter.js за по-добра четимост
- [x] Оправяме релативните пътища към стиловете и изображенията
- [] Визуализираме (get-ваме, рендерираме) view-тата
-- [x] В controllers/itemController създаваме get.all функционалност, в която рендерираме items/items.hbs, и я експортваме
-- [x] В controllers/index.js добавяме controllers/itemController и го експортваме
-- [x] В routers/itemRouter.js добавяме controllers/itemController, за да създадем пътищата към views
-- [x] В routers/index.js добавяме routers/itemRouter
-- [x] В config/routes добавяме пътя към items страницата
-- [x] В controllers/itemController създаваме get.create, get.details, get.edit функционалности
-- [x] Повтаряме процедурата до тук за userController.js (get.login и get.register (евентуално и get.profile)) и за homeController (get.home)
[] Правим login и register формулярите да работят (post-заявките) - authentication частта. Правим get.logout да работи.
- [x] В register.hbs и login.hbs, ако липсват във формуляра, допълваме action, method, href и name-атрибутите
- [x] В controllers/userController създаваме post.register и post.login
- [x] В models/User създаваме userSchema и я експортваме
- [x] В models/index.js добавяме models/User и го експортваме
- [x] В controllers/userController.js добавяме models/index.js, за да използваме User-модела в post-заявките
- [x] Правим логиката на post.register и на post.login
- [x] В routers/userRouter.js добавяме postRegister и postLogin
- [x] В controllers/userController.js добавяме utils(за jwt) и config(за cookie-то) и ги слагаме в post.
- [x] В controllers/userController.js правим логиката на get.logout и я добавяме в routers/userRouter.js
- [] Обработваме post.login паролата
-- [x] В models/index.js и в models/User.js добавяме bcrypt, за да хешираме паролата
-- [x] В models/User.js добавяме saltRounds и си създаваме pre-hook
-- [x] В models/User.js за userSchema-та закачаме метода comparePasswords()
-- [x] Зачистване на потребителите и регистрация наново
- [] Правим headers.hbs (и евентуално headerLogo.hbs) според условиeто за authentication
-- [x] Във header.hbs слагаме проверка дали потребителят е логнат
-- [x] В config/express.js добавяме utils, за да използваме authMiddleware.js
[] Правим логиката, свързана с Item-модела. 
Т.е. CRUD (без R) операциите и показването списъка със създадените динамични items
- [x] В models/Item създаваме itemSchema и я експортваме
- [x] В models/index.js добавяме models/Item и го експортваме
- [x] В controllers/itemController.js добавяме models, за да използваме Item-модела в заявките 
- [] Последователност: допълване в views -> функционалност в itemController -> добавяне в itemRouter
-- [x] Правим create формуляра да работи (post.create) 
-- [x] Показваме създадените динамични items
-- [] Показваме details на избрания item
--- [x] В controllers/itemController/get.details създаваме помощни променливи,
правим проверка дали текущият потребител е създател или е инкрементирал item-a и обновяваме item-обекта
--- [x] Правим edit формуляра да работи (get.edit и post.edit)
--- [x] В edit.hbs допълваме value-атрибута, за да може input-полетата да съдържат 
текущата информация за избрания item по подразбиране, а не да са празни
--- [x] Правим delete функционалността
--- [x] Правим increment функционалността - вземаме itemId и го пушваме в масива peopleWhoIncremented
--- [*] Правим сортиране на items - в controllers/itemController/get.all
-- [*] Показваме динамичен profile
--- [] В models/User.js добавяме пропърти myItems, за да можем да го използваме при регистрация, като след това
ще трябва да дропна потребителите в mongo и да почна наново, за да могат новите потребители да притежават пропъртито
--- [] В controllers/itemController/get.increment обновяваме itemsIncremented
--- [] В controllers/userController/post.register добавяме помощната променлива myItems и в get.profile довършваме логиката
[] Валидираме (проверяваме за спазване на изискванията в) input-полетата на формулярите
- [] Във register.hbs и login.hbs добавяме value-атрибути (и message**), за да може, когато потребителят направи грешка,
да бъдат запазени въведените данни в полетата, така че да не трябва да попълва целия формуляр наново
- [x] В utils/index.js добавяме registerMiddlewareValidator, loginMiddlewareValidator и formValidator
- [x] В routers/userRouter.js добавяме utils, за да използваме registerMiddlewareValidator и loginMiddlewareValidator в post.register
- [x] В controllers/userRouter добавяме utils, за да използваме formValidator в post.register и post.login
[] Регулираме достъпа до пътищата за гост и за логнат потребител
- [x] В utils/index.js добавяме isAuthNeededMiddleware и го експортваме
- [] Във всички routers  добавяме utils, за да използваме isAuthNeededMiddleware в заявките

**message може да се добави и в base-layout.hbs, header.hbs или footer.hbs, така че да го има на едно място, но да може да се ползва във всички формуляри